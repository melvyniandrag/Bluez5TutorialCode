/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __PROFILE_H__
#define __PROFILE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Profile1 */

#define TYPE_ORG_BLUEZ_PROFILE1 (org_bluez_profile1_get_type ())
#define ORG_BLUEZ_PROFILE1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_PROFILE1, OrgBluezProfile1))
#define IS_ORG_BLUEZ_PROFILE1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_PROFILE1))
#define ORG_BLUEZ_PROFILE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_PROFILE1, OrgBluezProfile1Iface))

struct _OrgBluezProfile1;
typedef struct _OrgBluezProfile1 OrgBluezProfile1;
typedef struct _OrgBluezProfile1Iface OrgBluezProfile1Iface;

struct _OrgBluezProfile1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_new_connection) (
    OrgBluezProfile1 *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    const gchar *arg_device,
    GVariant *arg_fd,
    GVariant *arg_fd_properties);

  gboolean (*handle_release) (
    OrgBluezProfile1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_request_disconnection) (
    OrgBluezProfile1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device);

};

GType org_bluez_profile1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_profile1_interface_info (void);
guint org_bluez_profile1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_profile1_complete_release (
    OrgBluezProfile1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_profile1_complete_new_connection (
    OrgBluezProfile1 *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list);

void org_bluez_profile1_complete_request_disconnection (
    OrgBluezProfile1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_bluez_profile1_call_release (
    OrgBluezProfile1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_profile1_call_release_finish (
    OrgBluezProfile1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_profile1_call_release_sync (
    OrgBluezProfile1 *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_profile1_call_new_connection (
    OrgBluezProfile1 *proxy,
    const gchar *arg_device,
    GVariant *arg_fd,
    GVariant *arg_fd_properties,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_profile1_call_new_connection_finish (
    OrgBluezProfile1 *proxy,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_profile1_call_new_connection_sync (
    OrgBluezProfile1 *proxy,
    const gchar *arg_device,
    GVariant *arg_fd,
    GVariant *arg_fd_properties,
    GUnixFDList  *fd_list,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void org_bluez_profile1_call_request_disconnection (
    OrgBluezProfile1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_profile1_call_request_disconnection_finish (
    OrgBluezProfile1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_profile1_call_request_disconnection_sync (
    OrgBluezProfile1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_BLUEZ_PROFILE1_PROXY (org_bluez_profile1_proxy_get_type ())
#define ORG_BLUEZ_PROFILE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_PROFILE1_PROXY, OrgBluezProfile1Proxy))
#define ORG_BLUEZ_PROFILE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_PROFILE1_PROXY, OrgBluezProfile1ProxyClass))
#define ORG_BLUEZ_PROFILE1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_PROFILE1_PROXY, OrgBluezProfile1ProxyClass))
#define IS_ORG_BLUEZ_PROFILE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_PROFILE1_PROXY))
#define IS_ORG_BLUEZ_PROFILE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_PROFILE1_PROXY))

typedef struct _OrgBluezProfile1Proxy OrgBluezProfile1Proxy;
typedef struct _OrgBluezProfile1ProxyClass OrgBluezProfile1ProxyClass;
typedef struct _OrgBluezProfile1ProxyPrivate OrgBluezProfile1ProxyPrivate;

struct _OrgBluezProfile1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezProfile1ProxyPrivate *priv;
};

struct _OrgBluezProfile1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_profile1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezProfile1Proxy, g_object_unref)
#endif

void org_bluez_profile1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezProfile1 *org_bluez_profile1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezProfile1 *org_bluez_profile1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_profile1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezProfile1 *org_bluez_profile1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezProfile1 *org_bluez_profile1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_PROFILE1_SKELETON (org_bluez_profile1_skeleton_get_type ())
#define ORG_BLUEZ_PROFILE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_PROFILE1_SKELETON, OrgBluezProfile1Skeleton))
#define ORG_BLUEZ_PROFILE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_PROFILE1_SKELETON, OrgBluezProfile1SkeletonClass))
#define ORG_BLUEZ_PROFILE1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_PROFILE1_SKELETON, OrgBluezProfile1SkeletonClass))
#define IS_ORG_BLUEZ_PROFILE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_PROFILE1_SKELETON))
#define IS_ORG_BLUEZ_PROFILE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_PROFILE1_SKELETON))

typedef struct _OrgBluezProfile1Skeleton OrgBluezProfile1Skeleton;
typedef struct _OrgBluezProfile1SkeletonClass OrgBluezProfile1SkeletonClass;
typedef struct _OrgBluezProfile1SkeletonPrivate OrgBluezProfile1SkeletonPrivate;

struct _OrgBluezProfile1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezProfile1SkeletonPrivate *priv;
};

struct _OrgBluezProfile1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_profile1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezProfile1Skeleton, g_object_unref)
#endif

OrgBluezProfile1 *org_bluez_profile1_skeleton_new (void);


/* ---- */

#define TYPE_OBJECT (object_get_type ())
#define OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT, Object))
#define IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT))
#define OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_OBJECT, Object))

struct _Object;
typedef struct _Object Object;
typedef struct _ObjectIface ObjectIface;

struct _ObjectIface
{
  GTypeInterface parent_iface;
};

GType object_get_type (void) G_GNUC_CONST;

OrgBluezProfile1 *object_get_org_bluez_profile1 (Object *object);
OrgBluezProfile1 *object_peek_org_bluez_profile1 (Object *object);

#define TYPE_OBJECT_PROXY (object_proxy_get_type ())
#define OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_PROXY, ObjectProxy))
#define OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_PROXY))
#define IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_PROXY))

typedef struct _ObjectProxy ObjectProxy;
typedef struct _ObjectProxyClass ObjectProxyClass;
typedef struct _ObjectProxyPrivate ObjectProxyPrivate;

struct _ObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  ObjectProxyPrivate *priv;
};

struct _ObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectProxy, g_object_unref)
#endif

ObjectProxy *object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define TYPE_OBJECT_SKELETON (object_skeleton_get_type ())
#define OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_SKELETON, ObjectSkeleton))
#define OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_SKELETON))
#define IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_SKELETON))

typedef struct _ObjectSkeleton ObjectSkeleton;
typedef struct _ObjectSkeletonClass ObjectSkeletonClass;
typedef struct _ObjectSkeletonPrivate ObjectSkeletonPrivate;

struct _ObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  ObjectSkeletonPrivate *priv;
};

struct _ObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectSkeleton, g_object_unref)
#endif

ObjectSkeleton *object_skeleton_new (const gchar *object_path);
void object_skeleton_set_org_bluez_profile1 (ObjectSkeleton *object, OrgBluezProfile1 *interface_);

/* ---- */

#define TYPE_OBJECT_MANAGER_CLIENT (object_manager_client_get_type ())
#define OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClient))
#define OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_MANAGER_CLIENT))
#define IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _ObjectManagerClient ObjectManagerClient;
typedef struct _ObjectManagerClientClass ObjectManagerClientClass;
typedef struct _ObjectManagerClientPrivate ObjectManagerClientPrivate;

struct _ObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  ObjectManagerClientPrivate *priv;
};

struct _ObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectManagerClient, g_object_unref)
#endif

GType object_manager_client_get_type (void) G_GNUC_CONST;

GType object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __PROFILE_H__ */
